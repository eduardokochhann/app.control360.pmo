@description('The location used for all deployed resources')
param location string = resourceGroup().location

@description('Tags that will be applied to all resources')
param tags object = {}

@description('Id of the user or app to assign application roles')
param principalId string

param appControl360SouExists bool

var abbrs = loadJsonContent('./abbreviations.json')
var resourceToken = uniqueString(subscription().id, resourceGroup().id, location)

// Container registry
module containerRegistry 'br/public:avm/res/container-registry/registry:0.1.1' = {
  name: 'registry'
  params: {
    name: '${abbrs.containerRegistryRegistries}${resourceToken}'
    location: location
    tags: tags
    publicNetworkAccess: 'Enabled'
    roleAssignments:[
      {
        principalId: appControl360SouIdentity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')
      }
    ]
  }
}

module keyVault 'br/public:avm/res/key-vault/vault:0.13.0' = {
  name: 'keyVault'
  params: {
    // Required parameters
    name: '${abbrs.keyVaultVaults}${resourceToken}'
    // Non-required parameters
    sku: 'standard'
    enablePurgeProtection: false
    roleAssignments: [
      {
        principalId: appControl360SouIdentity.outputs.principalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'Key Vault Secrets User'
      }
    ]
  }
}

module fileShareStorageAccount 'br/public:avm/res/storage/storage-account:0.20.0' = {
  name: 'file-share-storage-account'
  params: {
    // Required parameters
    name: '${abbrs.storageStorageAccounts}${resourceToken}'
    // Non-required parameters
    fileServices: {
      shares: [
        {
          enabledProtocols: 'SMB'
          name: 'app-control360-sou-app-data'
          shareQuota: 4 // Quota in GB
        }
      ]
    }
    publicNetworkAccess: 'Enabled'
    kind: 'StorageV2'
    skuName: 'Standard_LRS'
    secretsExportConfiguration: {
      keyVaultResourceId: keyVault.outputs.resourceId
      accessKey1Name: 'stg-appcontrol-360-sou-key1'
    }
    publicNetworkAccess: 'Enabled'
  }
}

// Container apps environment
module containerAppsEnvironment 'br/public:avm/res/app/managed-environment:0.11.2' = {
  name: 'container-apps-environment'
  params: {
    appLogsConfiguration: {
      destination: 'azure-monitor'
    }
    name: '${abbrs.appManagedEnvironments}${resourceToken}'
    location: location
    zoneRedundant: false
    storages: [
      {
        accessMode: 'ReadWrite'
        kind: 'SMB'
        shareName: 'app-control360-sou-app-data'
        storageAccountName: fileShareStorageAccount.outputs.name
      }
    ]
    publicNetworkAccess: 'Enabled'
  }
}

module appControl360SouIdentity 'br/public:avm/res/managed-identity/user-assigned-identity:0.2.1' = {
  name: 'appControl360Souidentity'
  params: {
    name: '${abbrs.managedIdentityUserAssignedIdentities}appControl360Sou-${resourceToken}'
    location: location
  }
}

module appControl360SouFetchLatestImage './modules/fetch-container-image.bicep' = {
  name: 'appControl360Sou-fetch-image'
  params: {
    exists: appControl360SouExists
    name: 'app-control360-sou'
  }
}

module appControl360Sou 'br/public:avm/res/app/container-app:0.17.0' = {
  name: 'appControl360Sou'
  params: {
    name: 'app-control360-sou'
    ingressTargetPort: 5000
    secrets: [
      {
        keyVaultUrl: '${keyVault.outputs.uri}secrets/stg-appcontrol-360-sou-key1'
        identity: appControl360SouIdentity.outputs.resourceId
        name: 'stg-appcontrol-360-sou-key1'
      }
    ]
    scaleSettings: {
      minReplicas: 1
      maxReplicas: 1
    }
    containers: [
      {
        image: appControl360SouFetchLatestImage.outputs.?containers[?0].?image ?? 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
        name: 'main'
        resources: {
          cpu: json('0.5')
          memory: '1.0Gi'
        }
        env: [
          {
            name: 'AZURE_CLIENT_ID'
            value: appControl360SouIdentity.outputs.clientId
          }
          {
            name: 'PORT'
            value: '5000'
          }
        ]
        volumeMounts: [
          {
            volumeName: 'app-data'
            mountPath: '/app/data'
          }
        ]
      }
    ]
    volumes: [
      {
        name: 'app-data'
        storageName: 'app-control360-sou-app-data' // Autogenerated from environment name
        storageType: 'AzureFile'
      }
    ]
    managedIdentities:{
      systemAssigned: false
      userAssignedResourceIds: [appControl360SouIdentity.outputs.resourceId]
    }
    registries:[
      {
        server: containerRegistry.outputs.loginServer
        identity: appControl360SouIdentity.outputs.resourceId
      }
    ]
    environmentResourceId: containerAppsEnvironment.outputs.resourceId
    location: location
    tags: union(tags, { 'azd-service-name': 'app-control360-sou' })
    ipSecurityRestrictions: [
          {
            name: 'allow-bernardo-ip'
            ipAddressRange: '45.230.235.125'
            action: 'Allow'
          }
    ]
    // TODO: Get admin permissions to allow this
    // identityProviders: {
    //   azureActiveDirectory: {
    //     registration: {
    //       openIdIssuer: 'https://sts.windows.net/a7220fd8-b71b-44f9-b153-117f6a6a7b2f/v2.0'
    //       clientId: 'c5b9b4ab-76e8-4f42-abca-bebf57ea1102'
    //       clientSecretSettingName: 'microsoft-provider-authentication-secret'
    //     }
    //     validation: {
    //       allowedAudiences: []
    //       defaultAuthorizationPolicy: {
    //         allowedPrincipals: {}
    //       }
    //     }
    //     isAutoProvisioned: false
    //   }
    // }
  }
}
output AZURE_CONTAINER_REGISTRY_ENDPOINT string = containerRegistry.outputs.loginServer
output AZURE_RESOURCE_APP_CONTROL360_SOU_ID string = appControl360Sou.outputs.resourceId
