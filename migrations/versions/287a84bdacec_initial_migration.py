"""initial migration

Revision ID: 287a84bdacec
Revises: 
Create Date: 2025-05-30 01:15:25.916847

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '287a84bdacec'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('backlog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('available_for_sprint', sa.Boolean(), server_default='1', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('backlog', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_backlog_project_id'), ['project_id'], unique=False)

    op.create_table('column',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('sprint',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('goal', sa.Text(), nullable=True),
    sa.Column('criticality', sa.String(length=50), server_default='Normal', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('project_milestone',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('planned_date', sa.Date(), nullable=False),
    sa.Column('actual_date', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'DELAYED', name='milestonestatus'), nullable=False),
    sa.Column('criticality', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='milestonecriticality'), nullable=False),
    sa.Column('is_checkpoint', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('backlog_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlog.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_risk',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('impact', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='riskimpact'), nullable=False),
    sa.Column('probability', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='riskprobability'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'MITIGATED', 'RESOLVED', name='riskstatus'), nullable=False),
    sa.Column('identified_date', sa.DateTime(), nullable=False),
    sa.Column('resolved_date', sa.DateTime(), nullable=True),
    sa.Column('mitigation_plan', sa.Text(), nullable=True),
    sa.Column('contingency_plan', sa.Text(), nullable=True),
    sa.Column('responsible', sa.String(length=150), nullable=True),
    sa.Column('trend', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('backlog_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlog.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'REVIEW', 'DONE', 'ARCHIVED', name='taskstatus'), nullable=False),
    sa.Column('priority', sa.String(length=50), nullable=True),
    sa.Column('estimated_effort', sa.Float(), nullable=True),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('logged_time', sa.Float(), nullable=True),
    sa.Column('actually_started_at', sa.DateTime(), nullable=True),
    sa.Column('specialist_name', sa.String(length=150), nullable=True),
    sa.Column('is_generic', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('is_unplanned', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('backlog_id', sa.Integer(), nullable=False),
    sa.Column('column_id', sa.Integer(), nullable=False),
    sa.Column('sprint_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlog.id'], ),
    sa.ForeignKeyConstraint(['column_id'], ['column.id'], ),
    sa.ForeignKeyConstraint(['sprint_id'], ['sprint.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_task_specialist_name'), ['specialist_name'], unique=False)

    op.create_table('notes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('note_type', sa.String(length=20), nullable=False),
    sa.Column('category', sa.String(length=20), server_default='general', nullable=False),
    sa.Column('priority', sa.String(length=20), server_default='medium', nullable=False),
    sa.Column('report_status', sa.String(length=20), server_default='draft', nullable=False),
    sa.Column('project_id', sa.String(length=50), nullable=False),
    sa.Column('backlog_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('report_date', sa.DateTime(), nullable=True),
    sa.Column('event_date', sa.Date(), nullable=True),
    sa.CheckConstraint("category IN ('decision', 'risk', 'impediment', 'status_update', 'general')", name='ck_note_category'),
    sa.CheckConstraint("note_type IN ('project', 'task')", name='ck_note_type'),
    sa.CheckConstraint("priority IN ('low', 'medium', 'high')", name='ck_note_priority'),
    sa.CheckConstraint("report_status IN ('draft', 'ready_for_report', 'reported')", name='ck_note_report_status'),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlog.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task_segment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('segment_start_datetime', sa.DateTime(), nullable=False),
    sa.Column('segment_end_datetime', sa.DateTime(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('task_segment', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_task_segment_task_id'), ['task_id'], unique=False)

    op.create_table('note_tags',
    sa.Column('note_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['notes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('note_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('note_tags')
    with op.batch_alter_table('task_segment', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task_segment_task_id'))

    op.drop_table('task_segment')
    op.drop_table('notes')
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task_specialist_name'))

    op.drop_table('task')
    op.drop_table('project_risk')
    op.drop_table('project_milestone')
    op.drop_table('tags')
    op.drop_table('sprint')
    op.drop_table('column')
    with op.batch_alter_table('backlog', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_backlog_project_id'))

    op.drop_table('backlog')
    # ### end Alembic commands ###
